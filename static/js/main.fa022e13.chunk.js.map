{"version":3,"sources":["corona/HeaderComponenet.jsx","corona/CoronaApp.jsx","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","props","state","country","region","regiondata","val","this","setState","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","value","onChange","selectCountry","selectRegion","Form","inline","FormControl","type","placeholder","Button","variant","Component","CoronaApp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qWAwDeA,E,YA7CX,WAAaC,GAAQ,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CAAEC,QAAS,GAAIC,OAAQ,GAAGC,WAAW,IAFlC,E,2EAKHC,GACbC,KAAKC,SAAS,CAAEL,QAASG,M,mCAGbA,GACZC,KAAKC,SAAS,CAAEJ,OAAQE,M,+BAGlB,IAAD,SACmCC,KAAKL,MAArCC,EADH,EACGA,QAASC,EADZ,EACYA,OADZ,EACoBC,WAIzB,OACI,kBAACI,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MAC1B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,UACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,QACA,kBAAC,IAAD,CACNQ,MAAOlB,EACPmB,SAAU,SAAChB,GAAD,OAAS,EAAKiB,cAAcjB,MACxC,kBAAC,IAAD,CACEH,QAASA,EACTkB,MAAOjB,EACPkB,SAAU,SAAChB,GAAD,OAAS,EAAKkB,aAAalB,OAGjC,kBAACmB,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASV,UAAU,YACxD,kBAACW,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,iB,GAtCcC,aCqCfC,E,iLAvBP,OACI,yBAAKd,UAAU,aACX,kBAAC,IAAD,KACI,oCACI,kBAAC,EAAD,MACA,kBAAC,IAAD,a,GAPAa,aCRTE,MARf,WACE,OACE,yBAAKf,UAAU,OACd,kBAAC,EAAD,QCGegB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa022e13.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n//import AuthenticationService from './AuthenticationService.js'\r\n\r\n\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\r\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\r\n\r\n\r\n\r\nclass HeaderComponent extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = { country: '', region: '',regiondata:''};\r\n      }\r\n     \r\n      selectCountry (val) {\r\n        this.setState({ country: val });\r\n      }\r\n     \r\n      selectRegion (val) {\r\n        this.setState({ region: val });\r\n      }\r\n     \r\n    render() {\r\n        const { country, region, regiondata } = this.state;\r\n        //const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n        //console.log(isUserLoggedIn);\r\n\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">Corona</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                <CountryDropdown\r\n          value={country}\r\n          onChange={(val) => this.selectCountry(val)} />\r\n        <RegionDropdown\r\n          country={country}\r\n          value={region}\r\n          onChange={(val) => this.selectRegion(val)} />\r\n         \r\n              </Nav>\r\n              <Form inline>\r\n                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                <Button variant=\"outline-success\">Search</Button>\r\n              </Form>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderComponent","import React, { Component } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from 'react-router-dom';\r\n\r\n  \r\n\r\n\r\n\r\n import HeaderComponent from './HeaderComponenet.jsx'\r\n// import WelcomeComponent from '../home/WelcomeComponent.jsx';\r\n\r\n// import FooterComponent from './FooterComponent.jsx';\r\n// import ErrorComponent from './ErrorComponent.jsx';\r\n// import AuthenticatedRoute from './AuthenticatedRoute.jsx';\r\n\r\n// import LoginComponent from './LoginComponent.jsx';\r\n// import LogoutComponent from './LogoutComponent.jsx';\r\n\r\nclass CoronaApp extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"CoronaApp\">\r\n                <Router>\r\n                    <>\r\n                        <HeaderComponent/>\r\n                        <Switch>\r\n                            {/* <Route path=\"/\" exact component={LoginComponent}/>\r\n                            <Route path=\"/login\" component={LoginComponent}/>\r\n                            <Route path=\"/welcome/:name\" component={WelcomeComponent}/>\r\n                            <Route path=\"/logout\" component={LogoutComponent}/>\r\n                            \r\n                            <Route component={ErrorComponent}/> */}\r\n                        </Switch>\r\n                        {/* <FooterComponent/> */}\r\n                    </>\r\n                </Router>\r\n                {/*<LoginComponent/>\r\n                <WelcomeComponent/>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CoronaApp","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport CoronaApp from './corona/CoronaApp.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <CoronaApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}